package GUI;

import Clases.Producto.Factura;
import Clases.Producto.GenerarFactura;
import Clases.Producto.Producto;
import Datos.ConexionBD;
import java.io.File;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Eithan
 */
public class ventanaProductos extends javax.swing.JFrame {
    
    
    //variables para manejar los productos 
    private String productoSeleccionado = "";
    private double precioSeleccionado = 0;
    private int cantidadSeleccionada = 0;
    
    /**
     * Creates new form ventanaProductos
     */
    public ventanaProductos() {
        initComponents();  
        cargarProductos();
    }
    
    
    private void actualizarTablaProductos() {
        
    // actualiza la tabla de productos .(la cantidad) 
    
    DefaultTableModel modeloProductos = (DefaultTableModel) jTable1.getModel();
    for (int i = 0; i < modeloProductos.getRowCount(); i++) {
       
        String producto = (String) modeloProductos.getValueAt(i, 0);  
        Connection conn = ConexionBD.getInstancia().getConexion();
   
        if (conn != null) {
            try {
                
                String sql = "SELECT stock FROM productos WHERE marca = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, producto);
                ResultSet rs = pstmt.executeQuery();
                
                if (rs.next()) {
                    int stock = rs.getInt("stock");
                    modeloProductos.setValueAt(stock, i, 2);  // Actualizamos la columna de stock
                }
                pstmt.close();
                rs.close();
                conn.close();
                
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

   
    //aqui se van a cargar los productos de la base de datos.  la marca y el precio y stock.  
    
    private void cargarProductos() {
        
   DefaultTableModel modeloProductos = (DefaultTableModel) jTable1.getModel();
    modeloProductos.setRowCount(0); 

    Connection conn = ConexionBD.getInstancia().getConexion();

    if (conn != null) {
        try {
            
            String sql = "SELECT marca, precio, stock FROM productos"; // SOLO las columnas necesarias
            PreparedStatement pstmt = conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String nombre = rs.getString("marca");
                double precio = rs.getDouble("precio");
                int stock = rs.getInt("stock");

                Object[] fila = { nombre, precio, stock };
                modeloProductos.addRow(fila);
            }

            rs.close();
            pstmt.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}
    
    //Este metodo se usa ya despues de hacer el proceso de pago con la factura . para limpiar todo los campos. 
    
    private void limpiarCampos() {
   
    txtNombreCliente.setText("");
    txtCedula.setText("");

    
    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
    model.setRowCount(0); 
    }
   
    
    // para actualizar la tabla cada vez que le agregemos un productto se actualice  el total
    
    private void actualizarTotal() {
    double total = 0;
    DefaultTableModel modeloCarrito = (DefaultTableModel) jTable2.getModel();
    
    for (int i = 0; i < modeloCarrito.getRowCount(); i++) {
        total += (double) modeloCarrito.getValueAt(i, 3); 
    }
    
    lblPagar.setText("Total a Pagar: $" + total);
}
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JSeparator();
        btnActualizarProductos = new javax.swing.JButton();
        btnagregarCantidad = new javax.swing.JButton();
        txtBuscador = new javax.swing.JTextField();
        boxFiltrar = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        btnPagar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnEliminarCantidad = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtNombreCliente = new javax.swing.JTextField();
        txtCedula = new javax.swing.JTextField();
        lblPagar = new javax.swing.JLabel();
        btnInfoCliente = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(java.awt.SystemColor.control);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(java.awt.SystemColor.window);
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(java.awt.SystemColor.activeCaptionText);
        jScrollPane1.setViewportView(null);
        jScrollPane1.setWheelScrollingEnabled(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio Unitario", "Cantidad"
            }) {
                // Sobrescribir el método isCellEditable para evitar la edición en todas las celdas
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // No permite editar ninguna celda
                }
            }

        );
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 310, 360));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Agregar Cantidad ");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 210, -1, -1));
        jPanel2.add(jSpinner2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 240, 70, -1));

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel2.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, -210, 20, 900));

        btnActualizarProductos.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        btnActualizarProductos.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizarProductos.setText("Actualizar ");
        btnActualizarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarProductosActionPerformed(evt);
            }
        });
        jPanel2.add(btnActualizarProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 550, 130, 30));

        btnagregarCantidad.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Blue"));
        btnagregarCantidad.setForeground(new java.awt.Color(255, 255, 255));
        btnagregarCantidad.setText("Confirmar");
        btnagregarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnagregarCantidadActionPerformed(evt);
            }
        });
        jPanel2.add(btnagregarCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 280, 90, 30));

        txtBuscador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscadorActionPerformed(evt);
            }
        });
        jPanel2.add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 170, -1));

        boxFiltrar.setEditable(true);
        boxFiltrar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Precio Unitario" }));
        boxFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxFiltrarActionPerformed(evt);
            }
        });
        jPanel2.add(boxFiltrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 120, 30));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Filtrar Productos  :");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 120, 30));

        btnBuscar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.GreyInline"));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 140, 80, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Productos");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 140, 50));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel2.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 20, 630));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 440, 600));

        jPanel3.setBackground(java.awt.SystemColor.window);
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Carrito");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 90, 30));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio", "Cantidad", "Subtotal"
            }) {

                // Sobrescribir el método isCellEditable para evitar la edición en todas las celdas
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // No permite editar ninguna celda
                }
            }
        );
        jScrollPane2.setViewportView(jTable2);

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 310, 370));

        btnEliminar.setBackground(new java.awt.Color(255, 204, 153));
        btnEliminar.setForeground(new java.awt.Color(0, 0, 0));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel3.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 350, 80, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Limpiar Carrito");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 420, -1, -1));
        jPanel3.add(jSpinner1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 210, 110, -1));

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Eliminar Cantidad ");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 190, 110, 20));

        btnPagar.setBackground(new java.awt.Color(0, 102, 0));
        btnPagar.setForeground(new java.awt.Color(255, 255, 255));
        btnPagar.setText("Ir a Pagar");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });
        jPanel3.add(btnPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 560, 90, 30));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Total a Pagar :");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 560, 130, -1));

        btnEliminarCantidad.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Blue"));
        btnEliminarCantidad.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarCantidad.setText("Confirmar");
        btnEliminarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCantidadActionPerformed(evt);
            }
        });
        jPanel3.add(btnEliminarCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 250, -1, -1));

        btnLimpiar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnLimpiar.setForeground(new java.awt.Color(0, 0, 0));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel3.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 450, 80, 30));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Eliminar Producto ");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 320, 110, 20));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Datos Relevantes");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 230, 30));

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 140, 460, 10));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Nombre del Ciente:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 120, 30));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Cedula:");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 50, 30));

        txtNombreCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreClienteActionPerformed(evt);
            }
        });
        jPanel3.add(txtNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 170, -1));

        txtCedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCedulaActionPerformed(evt);
            }
        });
        jPanel3.add(txtCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 180, -1));
        jPanel3.add(lblPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 560, 190, 30));

        btnInfoCliente.setText("Enviar");
        btnInfoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfoClienteActionPerformed(evt);
            }
        });
        jPanel3.add(btnInfoCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 100, -1, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 0, 450, 600));

        jLabel2.setBackground(java.awt.SystemColor.activeCaption);
        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI Light", 2, 18)); // NOI18N
        jLabel2.setForeground(java.awt.SystemColor.activeCaptionText);
        jLabel2.setText("Welcome to your favorite place ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 30, 270, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 600));
        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
  
    //Eliminar un producto desde el carrito . Este se le sumara a la tabla prodcuto. osea que volvera a su origen
    
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        
     int row = jTable2.getSelectedRow(); 
    
    if (row != -1) {
        DefaultTableModel modeloCarrito = (DefaultTableModel) jTable2.getModel();
        
        String producto = (String) modeloCarrito.getValueAt(row, 0);
        int cantidad = (int) modeloCarrito.getValueAt(row, 2);
        
        Connection conn = ConexionBD.getInstancia().getConexion();
        
        if (conn != null) {
            try {
                String sqlUpdate = "UPDATE productos SET stock = stock + ? WHERE marca = ?";
                PreparedStatement pstmt = conn.prepareStatement(sqlUpdate);
                pstmt.setInt(1, cantidad);
                pstmt.setString(2, producto);
                pstmt.executeUpdate();
                pstmt.close();
                
                // Eliminamos  del carrito
                modeloCarrito.removeRow(row);
                actualizarTotal();
                
                JOptionPane.showMessageDialog(this, "Producto eliminado del carrito y stock actualizado correctamente.");
                
                cargarProductos(); // lo usamos  para recargar la tabla de productos 
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al actualizar el stock: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay conexion a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione un producto para eliminar.");
    }
    
     
    }//GEN-LAST:event_btnEliminarActionPerformed

    
    
    
    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
       try {
           
        //   antes de nada obtenemos  los datos del cliente y hacemos que sea obligatorio para ir a pagar 
        String nombreCliente = txtNombreCliente.getText(); 
        String cedulaCliente = txtCedula.getText(); 

        if (nombreCliente.isEmpty() || cedulaCliente.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe completar los datos del cliente.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //  los productos del carrito
        ArrayList<Producto> productos = new ArrayList<>();
        int rowCount = jTable2.getRowCount();
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(this, "El carrito esta vacio.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        for (int i = 0; i < rowCount; i++) {
            String marca = (String) jTable2.getValueAt(i, 0); //  Producto
            BigDecimal precio = new BigDecimal(jTable2.getValueAt(i, 1).toString()); // Precio
            int cantidad = (int) jTable2.getValueAt(i, 2); // Cantidad

            Producto producto = new Producto(0, marca, precio, cantidad);
            
            productos.add(producto);
        }

        // creamos  la factura
        Factura factura = new Factura(1001, 10); 
        factura.getListaProductos().addAll(productos);

       
        BigDecimal subtotal = factura.calculoSubtotal();
        BigDecimal itbis = factura.calculoITBIS();
        BigDecimal total = factura.calculoTotal();

        // PDF
        String nombreArchivo = "Factura_" + nombreCliente.replace(" ", "_") + ".pdf";
        File archivo = new File(nombreArchivo);

        GenerarFactura.generarFacturaPDF(archivo.getAbsolutePath(), factura.getIdFactura(), Integer.parseInt(cedulaCliente), productos, subtotal, itbis, total);

        // Abrir  el PDF
        if (archivo.exists()) {
            java.awt.Desktop.getDesktop().open(archivo);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontro el archivo generado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        limpiarCampos();//este es el que usamos para limpiar despues de la factura.

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Ocurrio un error al generar la factura: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
                                      
    }//GEN-LAST:event_btnPagarActionPerformed

    private void txtBuscadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscadorActionPerformed
        // TODO add your handling code here:       
    }//GEN-LAST:event_txtBuscadorActionPerformed

    private void boxFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxFiltrarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxFiltrarActionPerformed

    
    
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        
        String filtro = boxFiltrar.getSelectedItem().toString();
        String busqueda = txtBuscador.getText();
        
        Connection conn = ConexionBD.getInstancia().getConexion();
        
        if (conn != null) {
            try {
                String sql = "SELECT marca, precio FROM productos";
                
                if (!busqueda.isEmpty()) {
                    
                    if (filtro.equals("Nombre")) {
                        sql += " WHERE marca LIKE '%" + busqueda + "%'";
                    
                    
                    } else if (filtro.equals("Precio Unitario")) {
                        try {
                            
                            double precioBuscado = Double.parseDouble(busqueda);
                            sql += " WHERE precio = " + precioBuscado;
                        
                        } catch (NumberFormatException e) {
                            
                            JOptionPane.showMessageDialog(this, "El precio debe ser un numero.");
                            return;
                    }
                }
            }
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql);
                DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                
                modelo.setRowCount(0);
                

                while (rs.next()) {
                    String marca = rs.getString("marca");
                    double precio = rs.getDouble("precio");
                    
                    modelo.addRow(new Object[]{marca, precio});
            }
                rs.close();
                stmt.close();
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            
            }
        
        } else {
            JOptionPane.showMessageDialog(this, "Error de conexion a la base de datos.");
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    
    //boton para limpiar la tala producto 
    
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        
     DefaultTableModel modeloCarrito = (DefaultTableModel) jTable2.getModel();
    
    Connection conn = ConexionBD.getInstancia().getConexion();
    
    if (conn != null) {
        try {
            conn.setAutoCommit(false); 
            
            for (int i = 0; i < modeloCarrito.getRowCount(); i++) {
                
                String producto = (String) modeloCarrito.getValueAt(i, 0);
                int cantidad = (int) modeloCarrito.getValueAt(i, 2);
                
                String sqlUpdate = "UPDATE productos SET stock = stock + ? WHERE marca = ?";
                PreparedStatement pstmt = conn.prepareStatement(sqlUpdate);
                pstmt.setInt(1, cantidad);
                pstmt.setString(2, producto);
                pstmt.executeUpdate();
                pstmt.close();
            }
            
            conn.commit(); 
            modeloCarrito.setRowCount(0); 
            actualizarTotal();
            JOptionPane.showMessageDialog(this, "Carrito vaciado y stock actualizado correctamente.");
            
            cargarProductos(); 
           
             } catch (SQLException ex) {                
                 try {
                     conn.rollback(); 
            
                 } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
                 }
                 JOptionPane.showMessageDialog(this, "Error al actualizar el stock: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);            
             }
    } else {
        JOptionPane.showMessageDialog(this, "No hay conexion a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnLimpiarActionPerformed

    
    
    private void txtNombreClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreClienteActionPerformed

    private void txtCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCedulaActionPerformed
  
    
    
    
    private void btnagregarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnagregarCantidadActionPerformed
        // TODO add your handling code here:
        
       int row = jTable1.getSelectedRow();  // tabla de productos 
       
       if (row != -1) {
        productoSeleccionado = jTable1.getValueAt(row, 0).toString();  //--- Nombre del producto
        precioSeleccionado = Double.parseDouble(jTable1.getValueAt(row, 1).toString());  //---- Precio del producto
        int stockDisponible = Integer.parseInt(jTable1.getValueAt(row, 2).toString());  //----- Stock disponible
        
        int cantidad = Integer.parseInt(jSpinner2.getValue().toString());  // Esta es la cantidad  desde el spinner
        
        if (cantidad <= 0) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor a cero.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (cantidad > stockDisponible) {
            JOptionPane.showMessageDialog(this, "No puedes seleccionar mas unidades de las disponibles. Stock: " + stockDisponible, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // variable para guardar la cantidad
        cantidadSeleccionada = cantidad;
        
        //  Actualizar en la base de datos 
        Connection conn = ConexionBD.getInstancia().getConexion();
        if (conn != null) {
            try {
                // Actualizar el stock en la base de datos
                String sql = "UPDATE productos SET stock = ? WHERE marca = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                int nuevoStock = stockDisponible - cantidad;
                pstmt.setInt(1, nuevoStock);
                pstmt.setString(2, productoSeleccionado);
                pstmt.executeUpdate();
                
                pstmt.close();
                

                // --- Actualizar en la tabla visual (tabla de productos) --- 
                jTable1.setValueAt(nuevoStock, row, 2);

                // --- Agregar el producto al carrito --- 
                DefaultTableModel modeloCarrito = (DefaultTableModel) jTable2.getModel();
                double subtotal = precioSeleccionado * cantidadSeleccionada;
                
                boolean productoExistente = false;
                
                // Verificar si el producto ya existe en el carrito
                
                for (int i = 0; i < modeloCarrito.getRowCount(); i++) {
                   
                    if (modeloCarrito.getValueAt(i, 0).equals(productoSeleccionado)) {
                        int cantidadExistente = (int) modeloCarrito.getValueAt(i, 2);
                        modeloCarrito.setValueAt(cantidadExistente + cantidadSeleccionada, i, 2);
                        modeloCarrito.setValueAt((cantidadExistente + cantidadSeleccionada) * precioSeleccionado, i, 3);
                        productoExistente = true;
                        break;
                    }
                }
                
                // Si el producto no esta en el carrito, agregarlo
                if (!productoExistente) {
                    modeloCarrito.addRow(new Object[]{productoSeleccionado, precioSeleccionado, cantidadSeleccionada, subtotal});
                }

                // Actualizar el total del carrito
                actualizarTotal();
                

                // Limpiar la seleccion de producto y cantidad
                productoSeleccionado = "";
                precioSeleccionado = 0;
                cantidadSeleccionada = 0;

                JOptionPane.showMessageDialog(this, "Producto agregado al carrito correctamente.");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar el stock en la base de datos.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error de conexion a la base de datos.");
        }

    } else {
        JOptionPane.showMessageDialog(this, "Seleccione un producto primero.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    }

    }//GEN-LAST:event_btnagregarCantidadActionPerformed

  
    
    private void btnEliminarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCantidadActionPerformed
    // TODO add your handling code here:
    
    
   //  tabla del carrito
    int row = jTable2.getSelectedRow();

    if (row != -1) {
        // Obtener la cantidad actual del carrito y la cantidad a eliminar
        int cantidadActual = (int) jTable2.getValueAt(row, 2); 
        int cantidadEliminar = (int) jSpinner1.getValue(); 

        //  si la cantidad es negativa
        if (cantidadEliminar < 0) {
            JOptionPane.showMessageDialog(this, "No se puede eliminar una cantidad negativa. Accion no valida.", "Error", JOptionPane.ERROR_MESSAGE);
            return;  
        }

        //  si la cantidad a eliminar es mayor que la cantidad disponible en el carrito
        if (cantidadEliminar > cantidadActual) {
            JOptionPane.showMessageDialog(this, "No puedes eliminar mas de la cantidad disponible en el carrito.", "Cantidad excedida", JOptionPane.ERROR_MESSAGE);
            return;  
        }

        //  la cantidad restante en el carrito despues de la eliminacion
        int cantidadRestante = cantidadActual - cantidadEliminar;
        
      
        String producto = (String) jTable2.getValueAt(row, 0); 

        // Conectar con la base de datos para actualizar el stock
        Connection conn = ConexionBD.getInstancia().getConexion();
        if (conn != null) {
            try {
                // Verificar el stock actual del producto en la base de datos
                String sqlCheck = "SELECT stock FROM productos WHERE marca = ?";
                PreparedStatement pstmtCheck = conn.prepareStatement(sqlCheck);
                pstmtCheck.setString(1, producto);
                ResultSet rsCheck = pstmtCheck.executeQuery();
                
                if (rsCheck.next()) {
                    int stockActual = rsCheck.getInt("stock");
                    
                    // Sumar la cantidad eliminada al stock (es decir, devolverla al stock)
                    int nuevoStock = stockActual + cantidadEliminar;

                    // Actualizar el stock en la base de datos
                    String sqlUpdate = "UPDATE productos SET stock = ? WHERE marca = ?";
                    PreparedStatement pstmtUpdate = conn.prepareStatement(sqlUpdate);
                    pstmtUpdate.setInt(1, nuevoStock);
                    pstmtUpdate.setString(2, producto);
                    int filasAfectadas = pstmtUpdate.executeUpdate();

                    if (filasAfectadas > 0) {
                        // Actualizar la tabla de productos
                        actualizarTablaProductos();
                        
                        // Si la cantidad restante es 0, eliminamos el producto del carrito
                        DefaultTableModel modeloCarrito = (DefaultTableModel) jTable2.getModel();
                        if (cantidadRestante == 0) {
                            modeloCarrito.removeRow(row);
                            JOptionPane.showMessageDialog(this, "El producto ha sido eliminado del carrito.", "Producto eliminado", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            // Si la cantidad restante es mayor que 0, actualizar la cantidad y el subtotal en el carrito
                            double precio = (double) jTable2.getValueAt(row, 1);  // Precio del producto
                            modeloCarrito.setValueAt(cantidadRestante, row, 2);  // Actualizamos la cantidad
                            modeloCarrito.setValueAt(cantidadRestante * precio, row, 3);  // Actualizamos el subtotal
                            JOptionPane.showMessageDialog(this, "La cantidad se ha actualizado en el carrito.", "Cantidad actualizada", JOptionPane.INFORMATION_MESSAGE);
                        }

                        // Actualizar el total del carrito
                        actualizarTotal();
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo actualizar el stock en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Producto no encontrado en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                }

                pstmtCheck.close();
                rsCheck.close();
                conn.close();

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al verificar o actualizar el stock en la base de datos.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error de conexion a la base de datos.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione un producto para modificar la cantidad.");
    }
    }//GEN-LAST:event_btnEliminarCantidadActionPerformed

    
    
    
    
    private void btnInfoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfoClienteActionPerformed
        // TODO add your handling code here:
        
        // Validar los campos de cliente
    String nombreCliente = txtNombreCliente.getText().trim();
    String cedula = txtCedula.getText().trim();
    
    if (nombreCliente.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Debe ingresar el nombre del cliente.", 
                "Campo Vacio", JOptionPane.WARNING_MESSAGE);
        txtNombreCliente.requestFocus();
        return;
    }
    
    if (cedula.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Debe ingresar la cedula del cliente.", 
                "Campo Vacio", JOptionPane.WARNING_MESSAGE);
        txtCedula.requestFocus();
        return;
    }
    
    // Validar que la cédula contenga solo números
    try {
        Integer.parseInt(cedula);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "La cedula debe contener solo numeros.", 
                "Formato Invalido", JOptionPane.ERROR_MESSAGE);
        txtCedula.requestFocus();
        return;
    }
    
    // Si todo es valido, mostrar mensaje de confirmación
    JOptionPane.showMessageDialog(this, 
            "Datos del cliente validados correctamente.\n" +
            "Cliente: " + nombreCliente + "\n" +
            "Cedula: " + cedula,
            "Datos Validos", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_btnInfoClienteActionPerformed

    
    
    private void btnActualizarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarProductosActionPerformed
        // TODO add your handling code here:
        cargarProductos();  

    }//GEN-LAST:event_btnActualizarProductosActionPerformed

    
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventanaProductos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxFiltrar;
    private javax.swing.JButton btnActualizarProductos;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEliminarCantidad;
    private javax.swing.JButton btnInfoCliente;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnagregarCantidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblPagar;
    private javax.swing.JTextField txtBuscador;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtNombreCliente;
    // End of variables declaration//GEN-END:variables
 
}